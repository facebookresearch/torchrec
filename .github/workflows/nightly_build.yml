# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Push Binary Nightly

on:
  workflow_call:
    secrets:
      AWS_PYTORCH_UPLOADER_ACCESS_KEY_ID:
        required: true
      AWS_PYTORCH_UPLOADER_SECRET_ACCESS_KEY:
        required: true
      PYPI_TOKEN:
        required: false
  # run every day at 11:15am
  schedule:
    - cron:  '15 11 * * *'
  # or manually trigger it
  workflow_dispatch:

jobs:
  # build on cpu hosts and upload to GHA
  build_on_cpu:
    strategy:
      matrix:
        include:
         - os: linux.2xlarge
           python-version: 3.7
           python-tag: "py37"
           cuda-tag: "cu11"
         - os: linux.2xlarge
           python-version: 3.8
           python-tag: "py38"
           cuda-tag: "cu11"
         - os: linux.2xlarge
           python-version: 3.9
           python-tag: "py39"
           cuda-tag: "cu11"

    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      runner: ${{ matrix.os }}
      # specify cuda here to get the correct build image that contains CUDA build toolkit
      gpu-arch-type: cuda
      gpu-arch-version: "11.7"
      timeout: 60
      upload-artifact: torchrec_nightly_${{ matrix.python-version }}_${{ matrix.cuda-tag }}.whl
      script: |
        ldd --version
        conda create -y --name build_binary python=${{ matrix.python-version }}
        conda info
        conda install -n build_binary -y pytorch pytorch-cuda=11.7 -c pytorch-nightly -c nvidia
        conda run -n build_binary python -m pip install -r requirements.txt
        conda run -n build_binary python -c "import torch.distributed"
        echo "torch.distributed succeeded"
        conda run -n build_binary python -c "import skbuild"
        echo "skbuild succeeded"
        conda run -n build_binary python -c "import numpy"
        echo "numpy succeeded"
        rm -r dist || true
        conda run -n build_binary \
            python setup.py bdist_wheel \
            --package_name torchrec-nightly \
            --python-tag=${{ matrix.python-tag }} \
            --dist-dir=${RUNNER_ARTIFACT_DIR}/

  test_on_gpu:
    strategy:
      matrix:
        os: [linux.4xlarge.nvidia.gpu]
        python-version: [3.7, 3.8, 3.9]
        cuda-tag: ["cu11"]
    needs: build_on_cpu
    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      runner: ${{ matrix.os }}
      gpu-arch-type: cuda
      gpu-arch-version: "11.7"
      timeout: 60
      download-artifact: torchrec_nightly_${{ matrix.python-version }}_${{ matrix.cuda-tag }}.whl
      script: |
        ldd --version
        conda create -y --name build_binary python=${{ matrix.python-version }}
        conda info
        conda install -n build_binary -y pytorch pytorch-cuda=11.7 -c pytorch-nightly -c nvidia
        # Install torchrec binary
        conda run -n build_binary python -m pip install ${RUNNER_ARTIFACT_DIR}/*.whl
        conda run -n build_binary \
          python -c "import torchrec"
  upload_package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [linux.2xlarge]
        python-version: [3.7, 3.8, 3.9]
        cuda-tag: ["cu11"]
    needs: test_on_gpu
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download wheel
      uses: actions/download-artifact@v2
      with:
        name: torchrec_nightly_${{ matrix.python-version }}_${{ matrix.cuda-tag }}.whl
    - name: Display structure of downloaded files
      run: ls -R
    - name: Update pip
      run: |
        sudo yum update -y
        sudo yum -y install git python3-pip
        sudo pip3 install --upgrade pip
    - name: Setup conda
      run: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
        bash ~/miniconda.sh -b -p $HOME/miniconda
    - name: setup Path
      run: |
        echo "/home/ec2-user/miniconda/bin" >> $GITHUB_PATH
        echo "CONDA=/home/ec2-user/miniconda" >> $GITHUB_PATH
    - name: create conda env
      run: |
        conda create --name build_binary python=${{ matrix.python-version }}
        conda info
    - name: Push TorchRec Binary to PYPI
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
          conda create -y --name build_binary
          conda run -n build_binary python -m pip install twine
          conda run -n build_binary \
            python -m twine upload \
              --username __token__ \
              --password "$PYPI_TOKEN" \
              --skip-existing \
              torchrec_nightly*.whl \
              --verbose
