// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: predictor.proto

#include "predictor.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace predictor {
constexpr SparseFeatures::SparseFeatures(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : lengths_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      values_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      weights_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      num_features_(0) {}
struct SparseFeaturesDefaultTypeInternal {
  constexpr SparseFeaturesDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseFeaturesDefaultTypeInternal() {}
  union {
    SparseFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    SparseFeaturesDefaultTypeInternal _SparseFeatures_default_instance_;
constexpr FloatFeatures::FloatFeatures(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : values_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      num_features_(0) {}
struct FloatFeaturesDefaultTypeInternal {
  constexpr FloatFeaturesDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatFeaturesDefaultTypeInternal() {}
  union {
    FloatFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    FloatFeaturesDefaultTypeInternal _FloatFeatures_default_instance_;
constexpr PredictionRequest::PredictionRequest(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : float_features_(nullptr),
      id_list_features_(nullptr),
      id_score_list_features_(nullptr),
      embedding_features_(nullptr),
      unary_features_(nullptr),
      batch_size_(0) {}
struct PredictionRequestDefaultTypeInternal {
  constexpr PredictionRequestDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionRequestDefaultTypeInternal() {}
  union {
    PredictionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PredictionRequestDefaultTypeInternal _PredictionRequest_default_instance_;
constexpr FloatVec::FloatVec(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : data_() {}
struct FloatVecDefaultTypeInternal {
  constexpr FloatVecDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatVecDefaultTypeInternal() {}
  union {
    FloatVec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatVecDefaultTypeInternal
    _FloatVec_default_instance_;
constexpr PredictionResponse_PredictionsEntry_DoNotUse::
    PredictionResponse_PredictionsEntry_DoNotUse(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized) {}
struct PredictionResponse_PredictionsEntry_DoNotUseDefaultTypeInternal {
  constexpr PredictionResponse_PredictionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionResponse_PredictionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PredictionResponse_PredictionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PredictionResponse_PredictionsEntry_DoNotUseDefaultTypeInternal
        _PredictionResponse_PredictionsEntry_DoNotUse_default_instance_;
constexpr PredictionResponse::PredictionResponse(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : predictions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
struct PredictionResponseDefaultTypeInternal {
  constexpr PredictionResponseDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionResponseDefaultTypeInternal() {}
  union {
    PredictionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PredictionResponseDefaultTypeInternal _PredictionResponse_default_instance_;
} // namespace predictor
static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_predictor_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const**
    file_level_enum_descriptors_predictor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_predictor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_predictor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::predictor::SparseFeatures, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::predictor::SparseFeatures, num_features_),
        PROTOBUF_FIELD_OFFSET(::predictor::SparseFeatures, lengths_),
        PROTOBUF_FIELD_OFFSET(::predictor::SparseFeatures, values_),
        PROTOBUF_FIELD_OFFSET(::predictor::SparseFeatures, weights_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::predictor::FloatFeatures, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::predictor::FloatFeatures, num_features_),
        PROTOBUF_FIELD_OFFSET(::predictor::FloatFeatures, values_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionRequest,
            _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::predictor::PredictionRequest, batch_size_),
        PROTOBUF_FIELD_OFFSET(::predictor::PredictionRequest, float_features_),
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionRequest,
            id_list_features_),
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionRequest,
            id_score_list_features_),
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionRequest,
            embedding_features_),
        PROTOBUF_FIELD_OFFSET(::predictor::PredictionRequest, unary_features_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::predictor::FloatVec, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::predictor::FloatVec, data_),
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionResponse_PredictionsEntry_DoNotUse,
            _has_bits_),
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionResponse_PredictionsEntry_DoNotUse,
            _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionResponse_PredictionsEntry_DoNotUse,
            key_),
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionResponse_PredictionsEntry_DoNotUse,
            value_),
        0,
        1,
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(
            ::predictor::PredictionResponse,
            _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::predictor::PredictionResponse, predictions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::predictor::SparseFeatures)},
        {10, -1, -1, sizeof(::predictor::FloatFeatures)},
        {18, -1, -1, sizeof(::predictor::PredictionRequest)},
        {30, -1, -1, sizeof(::predictor::FloatVec)},
        {37,
         45,
         -1,
         sizeof(::predictor::PredictionResponse_PredictionsEntry_DoNotUse)},
        {47, -1, -1, sizeof(::predictor::PredictionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::predictor::_SparseFeatures_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::predictor::_FloatFeatures_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::predictor::_PredictionRequest_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::predictor::_FloatVec_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::predictor::
            _PredictionResponse_PredictionsEntry_DoNotUse_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::predictor::_PredictionResponse_default_instance_),
};

const char descriptor_table_protodef_predictor_2eproto[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) =
    "\n\017predictor.proto\022\tpredictor\"X\n\016SparseFe"
    "atures\022\024\n\014num_features\030\001 \001(\005\022\017\n\007lengths\030"
    "\002 \001(\014\022\016\n\006values\030\003 \001(\014\022\017\n\007weights\030\004 \001(\014\"5"
    "\n\rFloatFeatures\022\024\n\014num_features\030\001 \001(\005\022\016\n"
    "\006values\030\002 \001(\014\"\262\002\n\021PredictionRequest\022\022\n\nb"
    "atch_size\030\001 \001(\005\0220\n\016float_features\030\002 \001(\0132"
    "\030.predictor.FloatFeatures\0223\n\020id_list_fea"
    "tures\030\003 \001(\0132\031.predictor.SparseFeatures\0229"
    "\n\026id_score_list_features\030\004 \001(\0132\031.predict"
    "or.SparseFeatures\0224\n\022embedding_features\030"
    "\005 \001(\0132\030.predictor.FloatFeatures\0221\n\016unary"
    "_features\030\006 \001(\0132\031.predictor.SparseFeatur"
    "es\"\030\n\010FloatVec\022\014\n\004data\030\001 \003(\002\"\242\001\n\022Predict"
    "ionResponse\022C\n\013predictions\030\001 \003(\0132..predi"
    "ctor.PredictionResponse.PredictionsEntry"
    "\032G\n\020PredictionsEntry\022\013\n\003key\030\001 \001(\t\022\"\n\005val"
    "ue\030\002 \001(\0132\023.predictor.FloatVec:\0028\0012U\n\tPre"
    "dictor\022H\n\007Predict\022\034.predictor.Prediction"
    "Request\032\035.predictor.PredictionResponse\"\000"
    "b\006proto3";
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_predictor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_predictor_2eproto = {
        false,
        false,
        768,
        descriptor_table_protodef_predictor_2eproto,
        "predictor.proto",
        &descriptor_table_predictor_2eproto_once,
        nullptr,
        0,
        6,
        schemas,
        file_default_instances,
        TableStruct_predictor_2eproto::offsets,
        file_level_metadata_predictor_2eproto,
        file_level_enum_descriptors_predictor_2eproto,
        file_level_service_descriptors_predictor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::
    DescriptorTable*
    descriptor_table_predictor_2eproto_getter() {
  return &descriptor_table_predictor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::
    AddDescriptorsRunner dynamic_init_dummy_predictor_2eproto(
        &descriptor_table_predictor_2eproto);
namespace predictor {

// ===================================================================

class SparseFeatures::_Internal {
 public:
};

SparseFeatures::SparseFeatures(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena,
    bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:predictor.SparseFeatures)
}
SparseFeatures::SparseFeatures(const SparseFeatures& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  lengths_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lengths().empty()) {
    lengths_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_lengths(),
        GetArenaForAllocation());
  }
  values_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_values().empty()) {
    values_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_values(),
        GetArenaForAllocation());
  }
  weights_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_weights().empty()) {
    weights_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_weights(),
        GetArenaForAllocation());
  }
  num_features_ = from.num_features_;
  // @@protoc_insertion_point(copy_constructor:predictor.SparseFeatures)
}

void SparseFeatures::SharedCtor() {
  lengths_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  values_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weights_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_features_ = 0;
}

SparseFeatures::~SparseFeatures() {
  // @@protoc_insertion_point(destructor:predictor.SparseFeatures)
  if (GetArenaForAllocation() != nullptr)
    return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SparseFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lengths_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  values_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weights_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SparseFeatures::ArenaDtor(void* object) {
  SparseFeatures* _this = reinterpret_cast<SparseFeatures*>(object);
  (void)_this;
}
void SparseFeatures::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void SparseFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseFeatures::Clear() {
  // @@protoc_insertion_point(message_clear_start:predictor.SparseFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  lengths_.ClearToEmpty();
  values_.ClearToEmpty();
  weights_.ClearToEmpty();
  num_features_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseFeatures::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num_features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes lengths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lengths();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_values();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes weights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_weights();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    } // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr,
        ctx);
    CHK_(ptr != nullptr);
  } // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseFeatures::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictor.SparseFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 num_features = 1;
  if (this->_internal_num_features() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->_internal_num_features(), target);
  }

  // bytes lengths = 2;
  if (!this->_internal_lengths().empty()) {
    target =
        stream->WriteBytesMaybeAliased(2, this->_internal_lengths(), target);
  }

  // bytes values = 3;
  if (!this->_internal_values().empty()) {
    target =
        stream->WriteBytesMaybeAliased(3, this->_internal_values(), target);
  }

  // bytes weights = 4;
  if (!this->_internal_weights().empty()) {
    target =
        stream->WriteBytesMaybeAliased(4, this->_internal_weights(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictor.SparseFeatures)
  return target;
}

size_t SparseFeatures::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:predictor.SparseFeatures)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // bytes lengths = 2;
  if (!this->_internal_lengths().empty()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_lengths());
  }

  // bytes values = 3;
  if (!this->_internal_values().empty()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_values());
  }

  // bytes weights = 4;
  if (!this->_internal_weights().empty()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_weights());
  }

  // int32 num_features = 1;
  if (this->_internal_num_features() != 0) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(
            this->_internal_num_features());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseFeatures::_class_data_ =
    {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
     SparseFeatures::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
SparseFeatures::GetClassData() const {
  return &_class_data_;
}

void SparseFeatures::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message* to,
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SparseFeatures*>(to)->MergeFrom(
      static_cast<const SparseFeatures&>(from));
}

void SparseFeatures::MergeFrom(const SparseFeatures& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:predictor.SparseFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (!from._internal_lengths().empty()) {
    _internal_set_lengths(from._internal_lengths());
  }
  if (!from._internal_values().empty()) {
    _internal_set_values(from._internal_values());
  }
  if (!from._internal_weights().empty()) {
    _internal_set_weights(from._internal_weights());
  }
  if (from._internal_num_features() != 0) {
    _internal_set_num_features(from._internal_num_features());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void SparseFeatures::CopyFrom(const SparseFeatures& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:predictor.SparseFeatures)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SparseFeatures::IsInitialized() const {
  return true;
}

void SparseFeatures::InternalSwap(SparseFeatures* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lengths_,
      lhs_arena,
      &other->lengths_,
      rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &values_,
      lhs_arena,
      &other->values_,
      rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &weights_,
      lhs_arena,
      &other->weights_,
      rhs_arena);
  swap(num_features_, other->num_features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseFeatures::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_predictor_2eproto_getter,
      &descriptor_table_predictor_2eproto_once,
      file_level_metadata_predictor_2eproto[0]);
}

// ===================================================================

class FloatFeatures::_Internal {
 public:
};

FloatFeatures::FloatFeatures(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena,
    bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:predictor.FloatFeatures)
}
FloatFeatures::FloatFeatures(const FloatFeatures& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  values_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_values().empty()) {
    values_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_values(),
        GetArenaForAllocation());
  }
  num_features_ = from.num_features_;
  // @@protoc_insertion_point(copy_constructor:predictor.FloatFeatures)
}

void FloatFeatures::SharedCtor() {
  values_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_features_ = 0;
}

FloatFeatures::~FloatFeatures() {
  // @@protoc_insertion_point(destructor:predictor.FloatFeatures)
  if (GetArenaForAllocation() != nullptr)
    return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  values_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FloatFeatures::ArenaDtor(void* object) {
  FloatFeatures* _this = reinterpret_cast<FloatFeatures*>(object);
  (void)_this;
}
void FloatFeatures::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void FloatFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatFeatures::Clear() {
  // @@protoc_insertion_point(message_clear_start:predictor.FloatFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  values_.ClearToEmpty();
  num_features_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatFeatures::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num_features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_values();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    } // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr,
        ctx);
    CHK_(ptr != nullptr);
  } // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatFeatures::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictor.FloatFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 num_features = 1;
  if (this->_internal_num_features() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->_internal_num_features(), target);
  }

  // bytes values = 2;
  if (!this->_internal_values().empty()) {
    target =
        stream->WriteBytesMaybeAliased(2, this->_internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictor.FloatFeatures)
  return target;
}

size_t FloatFeatures::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:predictor.FloatFeatures)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // bytes values = 2;
  if (!this->_internal_values().empty()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                      this->_internal_values());
  }

  // int32 num_features = 1;
  if (this->_internal_num_features() != 0) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(
            this->_internal_num_features());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatFeatures::_class_data_ =
    {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
     FloatFeatures::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* FloatFeatures::GetClassData()
    const {
  return &_class_data_;
}

void FloatFeatures::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message* to,
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FloatFeatures*>(to)->MergeFrom(
      static_cast<const FloatFeatures&>(from));
}

void FloatFeatures::MergeFrom(const FloatFeatures& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:predictor.FloatFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (!from._internal_values().empty()) {
    _internal_set_values(from._internal_values());
  }
  if (from._internal_num_features() != 0) {
    _internal_set_num_features(from._internal_num_features());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void FloatFeatures::CopyFrom(const FloatFeatures& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:predictor.FloatFeatures)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool FloatFeatures::IsInitialized() const {
  return true;
}

void FloatFeatures::InternalSwap(FloatFeatures* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &values_,
      lhs_arena,
      &other->values_,
      rhs_arena);
  swap(num_features_, other->num_features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatFeatures::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_predictor_2eproto_getter,
      &descriptor_table_predictor_2eproto_once,
      file_level_metadata_predictor_2eproto[1]);
}

// ===================================================================

class PredictionRequest::_Internal {
 public:
  static const ::predictor::FloatFeatures& float_features(
      const PredictionRequest* msg);
  static const ::predictor::SparseFeatures& id_list_features(
      const PredictionRequest* msg);
  static const ::predictor::SparseFeatures& id_score_list_features(
      const PredictionRequest* msg);
  static const ::predictor::FloatFeatures& embedding_features(
      const PredictionRequest* msg);
  static const ::predictor::SparseFeatures& unary_features(
      const PredictionRequest* msg);
};

const ::predictor::FloatFeatures& PredictionRequest::_Internal::float_features(
    const PredictionRequest* msg) {
  return *msg->float_features_;
}
const ::predictor::SparseFeatures&
PredictionRequest::_Internal::id_list_features(const PredictionRequest* msg) {
  return *msg->id_list_features_;
}
const ::predictor::SparseFeatures&
PredictionRequest::_Internal::id_score_list_features(
    const PredictionRequest* msg) {
  return *msg->id_score_list_features_;
}
const ::predictor::FloatFeatures&
PredictionRequest::_Internal::embedding_features(const PredictionRequest* msg) {
  return *msg->embedding_features_;
}
const ::predictor::SparseFeatures& PredictionRequest::_Internal::unary_features(
    const PredictionRequest* msg) {
  return *msg->unary_features_;
}
PredictionRequest::PredictionRequest(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena,
    bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:predictor.PredictionRequest)
}
PredictionRequest::PredictionRequest(const PredictionRequest& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  if (from._internal_has_float_features()) {
    float_features_ = new ::predictor::FloatFeatures(*from.float_features_);
  } else {
    float_features_ = nullptr;
  }
  if (from._internal_has_id_list_features()) {
    id_list_features_ =
        new ::predictor::SparseFeatures(*from.id_list_features_);
  } else {
    id_list_features_ = nullptr;
  }
  if (from._internal_has_id_score_list_features()) {
    id_score_list_features_ =
        new ::predictor::SparseFeatures(*from.id_score_list_features_);
  } else {
    id_score_list_features_ = nullptr;
  }
  if (from._internal_has_embedding_features()) {
    embedding_features_ =
        new ::predictor::FloatFeatures(*from.embedding_features_);
  } else {
    embedding_features_ = nullptr;
  }
  if (from._internal_has_unary_features()) {
    unary_features_ = new ::predictor::SparseFeatures(*from.unary_features_);
  } else {
    unary_features_ = nullptr;
  }
  batch_size_ = from.batch_size_;
  // @@protoc_insertion_point(copy_constructor:predictor.PredictionRequest)
}

void PredictionRequest::SharedCtor() {
  ::memset(
      reinterpret_cast<char*>(this) +
          static_cast<size_t>(
              reinterpret_cast<char*>(&float_features_) -
              reinterpret_cast<char*>(this)),
      0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&batch_size_) -
          reinterpret_cast<char*>(&float_features_)) +
          sizeof(batch_size_));
}

PredictionRequest::~PredictionRequest() {
  // @@protoc_insertion_point(destructor:predictor.PredictionRequest)
  if (GetArenaForAllocation() != nullptr)
    return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PredictionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance())
    delete float_features_;
  if (this != internal_default_instance())
    delete id_list_features_;
  if (this != internal_default_instance())
    delete id_score_list_features_;
  if (this != internal_default_instance())
    delete embedding_features_;
  if (this != internal_default_instance())
    delete unary_features_;
}

void PredictionRequest::ArenaDtor(void* object) {
  PredictionRequest* _this = reinterpret_cast<PredictionRequest*>(object);
  (void)_this;
}
void PredictionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void PredictionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:predictor.PredictionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaForAllocation() == nullptr && float_features_ != nullptr) {
    delete float_features_;
  }
  float_features_ = nullptr;
  if (GetArenaForAllocation() == nullptr && id_list_features_ != nullptr) {
    delete id_list_features_;
  }
  id_list_features_ = nullptr;
  if (GetArenaForAllocation() == nullptr &&
      id_score_list_features_ != nullptr) {
    delete id_score_list_features_;
  }
  id_score_list_features_ = nullptr;
  if (GetArenaForAllocation() == nullptr && embedding_features_ != nullptr) {
    delete embedding_features_;
  }
  embedding_features_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unary_features_ != nullptr) {
    delete unary_features_;
  }
  unary_features_ = nullptr;
  batch_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionRequest::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .predictor.FloatFeatures float_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .predictor.SparseFeatures id_list_features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_list_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .predictor.SparseFeatures id_score_list_features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(
              _internal_mutable_id_score_list_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .predictor.FloatFeatures embedding_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_embedding_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .predictor.SparseFeatures unary_features = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unary_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    } // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr,
        ctx);
    CHK_(ptr != nullptr);
  } // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictor.PredictionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 batch_size = 1;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->_internal_batch_size(), target);
  }

  // .predictor.FloatFeatures float_features = 2;
  if (this->_internal_has_float_features()) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::float_features(this), target, stream);
  }

  // .predictor.SparseFeatures id_list_features = 3;
  if (this->_internal_has_id_list_features()) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::id_list_features(this), target, stream);
  }

  // .predictor.SparseFeatures id_score_list_features = 4;
  if (this->_internal_has_id_score_list_features()) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            4, _Internal::id_score_list_features(this), target, stream);
  }

  // .predictor.FloatFeatures embedding_features = 5;
  if (this->_internal_has_embedding_features()) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            5, _Internal::embedding_features(this), target, stream);
  }

  // .predictor.SparseFeatures unary_features = 6;
  if (this->_internal_has_unary_features()) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            6, _Internal::unary_features(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictor.PredictionRequest)
  return target;
}

size_t PredictionRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:predictor.PredictionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // .predictor.FloatFeatures float_features = 2;
  if (this->_internal_has_float_features()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *float_features_);
  }

  // .predictor.SparseFeatures id_list_features = 3;
  if (this->_internal_has_id_list_features()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *id_list_features_);
  }

  // .predictor.SparseFeatures id_score_list_features = 4;
  if (this->_internal_has_id_score_list_features()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *id_score_list_features_);
  }

  // .predictor.FloatFeatures embedding_features = 5;
  if (this->_internal_has_embedding_features()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *embedding_features_);
  }

  // .predictor.SparseFeatures unary_features = 6;
  if (this->_internal_has_unary_features()) {
    total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                      *unary_features_);
  }

  // int32 batch_size = 1;
  if (this->_internal_batch_size() != 0) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(
            this->_internal_batch_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData
    PredictionRequest::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
        PredictionRequest::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
PredictionRequest::GetClassData() const {
  return &_class_data_;
}

void PredictionRequest::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message* to,
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionRequest*>(to)->MergeFrom(
      static_cast<const PredictionRequest&>(from));
}

void PredictionRequest::MergeFrom(const PredictionRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:predictor.PredictionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_float_features()) {
    _internal_mutable_float_features()->::predictor::FloatFeatures::MergeFrom(
        from._internal_float_features());
  }
  if (from._internal_has_id_list_features()) {
    _internal_mutable_id_list_features()
        ->::predictor::SparseFeatures::MergeFrom(
            from._internal_id_list_features());
  }
  if (from._internal_has_id_score_list_features()) {
    _internal_mutable_id_score_list_features()
        ->::predictor::SparseFeatures::MergeFrom(
            from._internal_id_score_list_features());
  }
  if (from._internal_has_embedding_features()) {
    _internal_mutable_embedding_features()
        ->::predictor::FloatFeatures::MergeFrom(
            from._internal_embedding_features());
  }
  if (from._internal_has_unary_features()) {
    _internal_mutable_unary_features()->::predictor::SparseFeatures::MergeFrom(
        from._internal_unary_features());
  }
  if (from._internal_batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void PredictionRequest::CopyFrom(const PredictionRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:predictor.PredictionRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool PredictionRequest::IsInitialized() const {
  return true;
}

void PredictionRequest::InternalSwap(PredictionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionRequest, batch_size_) +
      sizeof(PredictionRequest::batch_size_) -
      PROTOBUF_FIELD_OFFSET(PredictionRequest, float_features_)>(
      reinterpret_cast<char*>(&float_features_),
      reinterpret_cast<char*>(&other->float_features_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_predictor_2eproto_getter,
      &descriptor_table_predictor_2eproto_once,
      file_level_metadata_predictor_2eproto[2]);
}

// ===================================================================

class FloatVec::_Internal {
 public:
};

FloatVec::FloatVec(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned), data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:predictor.FloatVec)
}
FloatVec::FloatVec(const FloatVec& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:predictor.FloatVec)
}

void FloatVec::SharedCtor() {}

FloatVec::~FloatVec() {
  // @@protoc_insertion_point(destructor:predictor.FloatVec)
  if (GetArenaForAllocation() != nullptr)
    return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatVec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatVec::ArenaDtor(void* object) {
  FloatVec* _this = reinterpret_cast<FloatVec*>(object);
  (void)_this;
}
void FloatVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void FloatVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatVec::Clear() {
  // @@protoc_insertion_point(message_clear_start:predictor.FloatVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatVec::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(
              _internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data(
              ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    } // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr,
        ctx);
    CHK_(ptr != nullptr);
  } // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictor.FloatVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictor.FloatVec)
  return target;
}

size_t FloatVec::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:predictor.FloatVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                        static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatVec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatVec::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* FloatVec::GetClassData()
    const {
  return &_class_data_;
}

void FloatVec::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message* to,
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FloatVec*>(to)->MergeFrom(static_cast<const FloatVec&>(from));
}

void FloatVec::MergeFrom(const FloatVec& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:predictor.FloatVec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void FloatVec::CopyFrom(const FloatVec& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:predictor.FloatVec)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool FloatVec::IsInitialized() const {
  return true;
}

void FloatVec::InternalSwap(FloatVec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_predictor_2eproto_getter,
      &descriptor_table_predictor_2eproto_once,
      file_level_metadata_predictor_2eproto[3]);
}

// ===================================================================

PredictionResponse_PredictionsEntry_DoNotUse::
    PredictionResponse_PredictionsEntry_DoNotUse() {}
PredictionResponse_PredictionsEntry_DoNotUse::
    PredictionResponse_PredictionsEntry_DoNotUse(
        ::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PredictionResponse_PredictionsEntry_DoNotUse::MergeFrom(
    const PredictionResponse_PredictionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata
PredictionResponse_PredictionsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_predictor_2eproto_getter,
      &descriptor_table_predictor_2eproto_once,
      file_level_metadata_predictor_2eproto[4]);
}

// ===================================================================

class PredictionResponse::_Internal {
 public:
};

PredictionResponse::PredictionResponse(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena,
    bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
      predictions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:predictor.PredictionResponse)
}
PredictionResponse::PredictionResponse(const PredictionResponse& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  predictions_.MergeFrom(from.predictions_);
  // @@protoc_insertion_point(copy_constructor:predictor.PredictionResponse)
}

void PredictionResponse::SharedCtor() {}

PredictionResponse::~PredictionResponse() {
  // @@protoc_insertion_point(destructor:predictor.PredictionResponse)
  if (GetArenaForAllocation() != nullptr)
    return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PredictionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PredictionResponse::ArenaDtor(void* object) {
  PredictionResponse* _this = reinterpret_cast<PredictionResponse*>(object);
  (void)_this;
  _this->predictions_.~MapField();
}
inline void PredictionResponse::RegisterArenaDtor(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &PredictionResponse::ArenaDtor);
  }
}
void PredictionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:predictor.PredictionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  predictions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionResponse::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .predictor.FloatVec> predictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&predictions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    } // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr,
        ctx);
    CHK_(ptr != nullptr);
  } // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictor.PredictionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // map<string, .predictor.FloatVec> predictions = 1;
  if (!this->_internal_predictions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map<std::string, ::predictor::FloatVec>::
        const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem>
        Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(),
            static_cast<int>(p->first.length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "predictor.PredictionResponse.PredictionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_predictions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_predictions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map<std::string, ::predictor::FloatVec>::
          size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map<std::string, ::predictor::FloatVec>::
               const_iterator it = this->_internal_predictions().begin();
           it != this->_internal_predictions().end();
           ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PredictionResponse_PredictionsEntry_DoNotUse::Funcs::
            InternalSerialize(
                1,
                items[static_cast<ptrdiff_t>(i)]->first,
                items[static_cast<ptrdiff_t>(i)]->second,
                target,
                stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map<std::string, ::predictor::FloatVec>::
               const_iterator it = this->_internal_predictions().begin();
           it != this->_internal_predictions().end();
           ++it) {
        target = PredictionResponse_PredictionsEntry_DoNotUse::Funcs::
            InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictor.PredictionResponse)
  return target;
}

size_t PredictionResponse::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:predictor.PredictionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // map<string, .predictor.FloatVec> predictions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                    this->_internal_predictions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map<std::string, ::predictor::FloatVec>::
           const_iterator it = this->_internal_predictions().begin();
       it != this->_internal_predictions().end();
       ++it) {
    total_size +=
        PredictionResponse_PredictionsEntry_DoNotUse::Funcs::ByteSizeLong(
            it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData
    PredictionResponse::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
        PredictionResponse::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
PredictionResponse::GetClassData() const {
  return &_class_data_;
}

void PredictionResponse::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message* to,
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionResponse*>(to)->MergeFrom(
      static_cast<const PredictionResponse&>(from));
}

void PredictionResponse::MergeFrom(const PredictionResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:predictor.PredictionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void PredictionResponse::CopyFrom(const PredictionResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:predictor.PredictionResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool PredictionResponse::IsInitialized() const {
  return true;
}

void PredictionResponse::InternalSwap(PredictionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  predictions_.InternalSwap(&other->predictions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_predictor_2eproto_getter,
      &descriptor_table_predictor_2eproto_once,
      file_level_metadata_predictor_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
} // namespace predictor
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::predictor::SparseFeatures*
Arena::CreateMaybeMessage<::predictor::SparseFeatures>(Arena* arena) {
  return Arena::CreateMessageInternal<::predictor::SparseFeatures>(arena);
}
template <>
PROTOBUF_NOINLINE ::predictor::FloatFeatures*
Arena::CreateMaybeMessage<::predictor::FloatFeatures>(Arena* arena) {
  return Arena::CreateMessageInternal<::predictor::FloatFeatures>(arena);
}
template <>
PROTOBUF_NOINLINE ::predictor::PredictionRequest*
Arena::CreateMaybeMessage<::predictor::PredictionRequest>(Arena* arena) {
  return Arena::CreateMessageInternal<::predictor::PredictionRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::predictor::FloatVec*
Arena::CreateMaybeMessage<::predictor::FloatVec>(Arena* arena) {
  return Arena::CreateMessageInternal<::predictor::FloatVec>(arena);
}
template <>
PROTOBUF_NOINLINE ::predictor::PredictionResponse_PredictionsEntry_DoNotUse*
Arena::CreateMaybeMessage<
    ::predictor::PredictionResponse_PredictionsEntry_DoNotUse>(Arena* arena) {
  return Arena::CreateMessageInternal<
      ::predictor::PredictionResponse_PredictionsEntry_DoNotUse>(arena);
}
template <>
PROTOBUF_NOINLINE ::predictor::PredictionResponse*
Arena::CreateMaybeMessage<::predictor::PredictionResponse>(Arena* arena) {
  return Arena::CreateMessageInternal<::predictor::PredictionResponse>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
