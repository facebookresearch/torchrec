// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: predictor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_predictor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_predictor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_predictor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_predictor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_predictor_2eproto;
namespace predictor {
class FloatFeatures;
struct FloatFeaturesDefaultTypeInternal;
extern FloatFeaturesDefaultTypeInternal _FloatFeatures_default_instance_;
class FloatVec;
struct FloatVecDefaultTypeInternal;
extern FloatVecDefaultTypeInternal _FloatVec_default_instance_;
class PredictionRequest;
struct PredictionRequestDefaultTypeInternal;
extern PredictionRequestDefaultTypeInternal _PredictionRequest_default_instance_;
class PredictionResponse;
struct PredictionResponseDefaultTypeInternal;
extern PredictionResponseDefaultTypeInternal _PredictionResponse_default_instance_;
class PredictionResponse_PredictionsEntry_DoNotUse;
struct PredictionResponse_PredictionsEntry_DoNotUseDefaultTypeInternal;
extern PredictionResponse_PredictionsEntry_DoNotUseDefaultTypeInternal _PredictionResponse_PredictionsEntry_DoNotUse_default_instance_;
class SparseFeatures;
struct SparseFeaturesDefaultTypeInternal;
extern SparseFeaturesDefaultTypeInternal _SparseFeatures_default_instance_;
}  // namespace predictor
PROTOBUF_NAMESPACE_OPEN
template<> ::predictor::FloatFeatures* Arena::CreateMaybeMessage<::predictor::FloatFeatures>(Arena*);
template<> ::predictor::FloatVec* Arena::CreateMaybeMessage<::predictor::FloatVec>(Arena*);
template<> ::predictor::PredictionRequest* Arena::CreateMaybeMessage<::predictor::PredictionRequest>(Arena*);
template<> ::predictor::PredictionResponse* Arena::CreateMaybeMessage<::predictor::PredictionResponse>(Arena*);
template<> ::predictor::PredictionResponse_PredictionsEntry_DoNotUse* Arena::CreateMaybeMessage<::predictor::PredictionResponse_PredictionsEntry_DoNotUse>(Arena*);
template<> ::predictor::SparseFeatures* Arena::CreateMaybeMessage<::predictor::SparseFeatures>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace predictor {

// ===================================================================

class SparseFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:predictor.SparseFeatures) */ {
 public:
  inline SparseFeatures() : SparseFeatures(nullptr) {}
  ~SparseFeatures() override;
  explicit constexpr SparseFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseFeatures(const SparseFeatures& from);
  SparseFeatures(SparseFeatures&& from) noexcept
    : SparseFeatures() {
    *this = ::std::move(from);
  }

  inline SparseFeatures& operator=(const SparseFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseFeatures& operator=(SparseFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseFeatures* internal_default_instance() {
    return reinterpret_cast<const SparseFeatures*>(
               &_SparseFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SparseFeatures& a, SparseFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseFeatures* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseFeatures* New() const final {
    return new SparseFeatures();
  }

  SparseFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SparseFeatures& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseFeatures* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "predictor.SparseFeatures";
  }
  protected:
  explicit SparseFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthsFieldNumber = 2,
    kValuesFieldNumber = 3,
    kWeightsFieldNumber = 4,
    kNumFeaturesFieldNumber = 1,
  };
  // bytes lengths = 2;
  void clear_lengths();
  const std::string& lengths() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lengths(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lengths();
  PROTOBUF_MUST_USE_RESULT std::string* release_lengths();
  void set_allocated_lengths(std::string* lengths);
  private:
  const std::string& _internal_lengths() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lengths(const std::string& value);
  std::string* _internal_mutable_lengths();
  public:

  // bytes values = 3;
  void clear_values();
  const std::string& values() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_values(ArgT0&& arg0, ArgT... args);
  std::string* mutable_values();
  PROTOBUF_MUST_USE_RESULT std::string* release_values();
  void set_allocated_values(std::string* values);
  private:
  const std::string& _internal_values() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  // bytes weights = 4;
  void clear_weights();
  const std::string& weights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_weights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_weights();
  PROTOBUF_MUST_USE_RESULT std::string* release_weights();
  void set_allocated_weights(std::string* weights);
  private:
  const std::string& _internal_weights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weights(const std::string& value);
  std::string* _internal_mutable_weights();
  public:

  // int32 num_features = 1;
  void clear_num_features();
  ::PROTOBUF_NAMESPACE_ID::int32 num_features() const;
  void set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_features() const;
  void _internal_set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:predictor.SparseFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lengths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weights_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_predictor_2eproto;
};
// -------------------------------------------------------------------

class FloatFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:predictor.FloatFeatures) */ {
 public:
  inline FloatFeatures() : FloatFeatures(nullptr) {}
  ~FloatFeatures() override;
  explicit constexpr FloatFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatFeatures(const FloatFeatures& from);
  FloatFeatures(FloatFeatures&& from) noexcept
    : FloatFeatures() {
    *this = ::std::move(from);
  }

  inline FloatFeatures& operator=(const FloatFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatFeatures& operator=(FloatFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatFeatures* internal_default_instance() {
    return reinterpret_cast<const FloatFeatures*>(
               &_FloatFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FloatFeatures& a, FloatFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatFeatures* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatFeatures* New() const final {
    return new FloatFeatures();
  }

  FloatFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatFeatures& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatFeatures* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "predictor.FloatFeatures";
  }
  protected:
  explicit FloatFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kNumFeaturesFieldNumber = 1,
  };
  // bytes values = 2;
  void clear_values();
  const std::string& values() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_values(ArgT0&& arg0, ArgT... args);
  std::string* mutable_values();
  PROTOBUF_MUST_USE_RESULT std::string* release_values();
  void set_allocated_values(std::string* values);
  private:
  const std::string& _internal_values() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  // int32 num_features = 1;
  void clear_num_features();
  ::PROTOBUF_NAMESPACE_ID::int32 num_features() const;
  void set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_features() const;
  void _internal_set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:predictor.FloatFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_predictor_2eproto;
};
// -------------------------------------------------------------------

class PredictionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:predictor.PredictionRequest) */ {
 public:
  inline PredictionRequest() : PredictionRequest(nullptr) {}
  ~PredictionRequest() override;
  explicit constexpr PredictionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionRequest(const PredictionRequest& from);
  PredictionRequest(PredictionRequest&& from) noexcept
    : PredictionRequest() {
    *this = ::std::move(from);
  }

  inline PredictionRequest& operator=(const PredictionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionRequest& operator=(PredictionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PredictionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionRequest* internal_default_instance() {
    return reinterpret_cast<const PredictionRequest*>(
               &_PredictionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PredictionRequest& a, PredictionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionRequest* New() const final {
    return new PredictionRequest();
  }

  PredictionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PredictionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PredictionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "predictor.PredictionRequest";
  }
  protected:
  explicit PredictionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatFeaturesFieldNumber = 2,
    kIdListFeaturesFieldNumber = 3,
    kIdScoreListFeaturesFieldNumber = 4,
    kEmbeddingFeaturesFieldNumber = 5,
    kUnaryFeaturesFieldNumber = 6,
    kBatchSizeFieldNumber = 1,
  };
  // .predictor.FloatFeatures float_features = 2;
  bool has_float_features() const;
  private:
  bool _internal_has_float_features() const;
  public:
  void clear_float_features();
  const ::predictor::FloatFeatures& float_features() const;
  PROTOBUF_MUST_USE_RESULT ::predictor::FloatFeatures* release_float_features();
  ::predictor::FloatFeatures* mutable_float_features();
  void set_allocated_float_features(::predictor::FloatFeatures* float_features);
  private:
  const ::predictor::FloatFeatures& _internal_float_features() const;
  ::predictor::FloatFeatures* _internal_mutable_float_features();
  public:
  void unsafe_arena_set_allocated_float_features(
      ::predictor::FloatFeatures* float_features);
  ::predictor::FloatFeatures* unsafe_arena_release_float_features();

  // .predictor.SparseFeatures id_list_features = 3;
  bool has_id_list_features() const;
  private:
  bool _internal_has_id_list_features() const;
  public:
  void clear_id_list_features();
  const ::predictor::SparseFeatures& id_list_features() const;
  PROTOBUF_MUST_USE_RESULT ::predictor::SparseFeatures* release_id_list_features();
  ::predictor::SparseFeatures* mutable_id_list_features();
  void set_allocated_id_list_features(::predictor::SparseFeatures* id_list_features);
  private:
  const ::predictor::SparseFeatures& _internal_id_list_features() const;
  ::predictor::SparseFeatures* _internal_mutable_id_list_features();
  public:
  void unsafe_arena_set_allocated_id_list_features(
      ::predictor::SparseFeatures* id_list_features);
  ::predictor::SparseFeatures* unsafe_arena_release_id_list_features();

  // .predictor.SparseFeatures id_score_list_features = 4;
  bool has_id_score_list_features() const;
  private:
  bool _internal_has_id_score_list_features() const;
  public:
  void clear_id_score_list_features();
  const ::predictor::SparseFeatures& id_score_list_features() const;
  PROTOBUF_MUST_USE_RESULT ::predictor::SparseFeatures* release_id_score_list_features();
  ::predictor::SparseFeatures* mutable_id_score_list_features();
  void set_allocated_id_score_list_features(::predictor::SparseFeatures* id_score_list_features);
  private:
  const ::predictor::SparseFeatures& _internal_id_score_list_features() const;
  ::predictor::SparseFeatures* _internal_mutable_id_score_list_features();
  public:
  void unsafe_arena_set_allocated_id_score_list_features(
      ::predictor::SparseFeatures* id_score_list_features);
  ::predictor::SparseFeatures* unsafe_arena_release_id_score_list_features();

  // .predictor.FloatFeatures embedding_features = 5;
  bool has_embedding_features() const;
  private:
  bool _internal_has_embedding_features() const;
  public:
  void clear_embedding_features();
  const ::predictor::FloatFeatures& embedding_features() const;
  PROTOBUF_MUST_USE_RESULT ::predictor::FloatFeatures* release_embedding_features();
  ::predictor::FloatFeatures* mutable_embedding_features();
  void set_allocated_embedding_features(::predictor::FloatFeatures* embedding_features);
  private:
  const ::predictor::FloatFeatures& _internal_embedding_features() const;
  ::predictor::FloatFeatures* _internal_mutable_embedding_features();
  public:
  void unsafe_arena_set_allocated_embedding_features(
      ::predictor::FloatFeatures* embedding_features);
  ::predictor::FloatFeatures* unsafe_arena_release_embedding_features();

  // .predictor.SparseFeatures unary_features = 6;
  bool has_unary_features() const;
  private:
  bool _internal_has_unary_features() const;
  public:
  void clear_unary_features();
  const ::predictor::SparseFeatures& unary_features() const;
  PROTOBUF_MUST_USE_RESULT ::predictor::SparseFeatures* release_unary_features();
  ::predictor::SparseFeatures* mutable_unary_features();
  void set_allocated_unary_features(::predictor::SparseFeatures* unary_features);
  private:
  const ::predictor::SparseFeatures& _internal_unary_features() const;
  ::predictor::SparseFeatures* _internal_mutable_unary_features();
  public:
  void unsafe_arena_set_allocated_unary_features(
      ::predictor::SparseFeatures* unary_features);
  ::predictor::SparseFeatures* unsafe_arena_release_unary_features();

  // int32 batch_size = 1;
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:predictor.PredictionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::predictor::FloatFeatures* float_features_;
  ::predictor::SparseFeatures* id_list_features_;
  ::predictor::SparseFeatures* id_score_list_features_;
  ::predictor::FloatFeatures* embedding_features_;
  ::predictor::SparseFeatures* unary_features_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_predictor_2eproto;
};
// -------------------------------------------------------------------

class FloatVec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:predictor.FloatVec) */ {
 public:
  inline FloatVec() : FloatVec(nullptr) {}
  ~FloatVec() override;
  explicit constexpr FloatVec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatVec(const FloatVec& from);
  FloatVec(FloatVec&& from) noexcept
    : FloatVec() {
    *this = ::std::move(from);
  }

  inline FloatVec& operator=(const FloatVec& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVec& operator=(FloatVec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatVec& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatVec* internal_default_instance() {
    return reinterpret_cast<const FloatVec*>(
               &_FloatVec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FloatVec& a, FloatVec& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatVec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatVec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatVec* New() const final {
    return new FloatVec();
  }

  FloatVec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatVec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatVec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatVec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatVec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "predictor.FloatVec";
  }
  protected:
  explicit FloatVec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:predictor.FloatVec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_predictor_2eproto;
};
// -------------------------------------------------------------------

class PredictionResponse_PredictionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PredictionResponse_PredictionsEntry_DoNotUse,
    std::string, ::predictor::FloatVec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PredictionResponse_PredictionsEntry_DoNotUse,
    std::string, ::predictor::FloatVec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PredictionResponse_PredictionsEntry_DoNotUse();
  explicit constexpr PredictionResponse_PredictionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PredictionResponse_PredictionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PredictionResponse_PredictionsEntry_DoNotUse& other);
  static const PredictionResponse_PredictionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PredictionResponse_PredictionsEntry_DoNotUse*>(&_PredictionResponse_PredictionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "predictor.PredictionResponse.PredictionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PredictionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:predictor.PredictionResponse) */ {
 public:
  inline PredictionResponse() : PredictionResponse(nullptr) {}
  ~PredictionResponse() override;
  explicit constexpr PredictionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionResponse(const PredictionResponse& from);
  PredictionResponse(PredictionResponse&& from) noexcept
    : PredictionResponse() {
    *this = ::std::move(from);
  }

  inline PredictionResponse& operator=(const PredictionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionResponse& operator=(PredictionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PredictionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionResponse* internal_default_instance() {
    return reinterpret_cast<const PredictionResponse*>(
               &_PredictionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PredictionResponse& a, PredictionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionResponse* New() const final {
    return new PredictionResponse();
  }

  PredictionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PredictionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PredictionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "predictor.PredictionResponse";
  }
  protected:
  explicit PredictionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPredictionsFieldNumber = 1,
  };
  // map<string, .predictor.FloatVec> predictions = 1;
  int predictions_size() const;
  private:
  int _internal_predictions_size() const;
  public:
  void clear_predictions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::predictor::FloatVec >&
      _internal_predictions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::predictor::FloatVec >*
      _internal_mutable_predictions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::predictor::FloatVec >&
      predictions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::predictor::FloatVec >*
      mutable_predictions();

  // @@protoc_insertion_point(class_scope:predictor.PredictionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PredictionResponse_PredictionsEntry_DoNotUse,
      std::string, ::predictor::FloatVec,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> predictions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_predictor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SparseFeatures

// int32 num_features = 1;
inline void SparseFeatures::clear_num_features() {
  num_features_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SparseFeatures::_internal_num_features() const {
  return num_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SparseFeatures::num_features() const {
  // @@protoc_insertion_point(field_get:predictor.SparseFeatures.num_features)
  return _internal_num_features();
}
inline void SparseFeatures::_internal_set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value) {

  num_features_ = value;
}
inline void SparseFeatures::set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_features(value);
  // @@protoc_insertion_point(field_set:predictor.SparseFeatures.num_features)
}

// bytes lengths = 2;
inline void SparseFeatures::clear_lengths() {
  lengths_.ClearToEmpty();
}
inline const std::string& SparseFeatures::lengths() const {
  // @@protoc_insertion_point(field_get:predictor.SparseFeatures.lengths)
  return _internal_lengths();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SparseFeatures::set_lengths(ArgT0&& arg0, ArgT... args) {

 lengths_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:predictor.SparseFeatures.lengths)
}
inline std::string* SparseFeatures::mutable_lengths() {
  std::string* _s = _internal_mutable_lengths();
  // @@protoc_insertion_point(field_mutable:predictor.SparseFeatures.lengths)
  return _s;
}
inline const std::string& SparseFeatures::_internal_lengths() const {
  return lengths_.Get();
}
inline void SparseFeatures::_internal_set_lengths(const std::string& value) {

  lengths_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SparseFeatures::_internal_mutable_lengths() {

  return lengths_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SparseFeatures::release_lengths() {
  // @@protoc_insertion_point(field_release:predictor.SparseFeatures.lengths)
  return lengths_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SparseFeatures::set_allocated_lengths(std::string* lengths) {
  if (lengths != nullptr) {

  } else {

  }
  lengths_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lengths,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:predictor.SparseFeatures.lengths)
}

// bytes values = 3;
inline void SparseFeatures::clear_values() {
  values_.ClearToEmpty();
}
inline const std::string& SparseFeatures::values() const {
  // @@protoc_insertion_point(field_get:predictor.SparseFeatures.values)
  return _internal_values();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SparseFeatures::set_values(ArgT0&& arg0, ArgT... args) {

 values_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:predictor.SparseFeatures.values)
}
inline std::string* SparseFeatures::mutable_values() {
  std::string* _s = _internal_mutable_values();
  // @@protoc_insertion_point(field_mutable:predictor.SparseFeatures.values)
  return _s;
}
inline const std::string& SparseFeatures::_internal_values() const {
  return values_.Get();
}
inline void SparseFeatures::_internal_set_values(const std::string& value) {

  values_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SparseFeatures::_internal_mutable_values() {

  return values_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SparseFeatures::release_values() {
  // @@protoc_insertion_point(field_release:predictor.SparseFeatures.values)
  return values_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SparseFeatures::set_allocated_values(std::string* values) {
  if (values != nullptr) {

  } else {

  }
  values_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), values,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:predictor.SparseFeatures.values)
}

// bytes weights = 4;
inline void SparseFeatures::clear_weights() {
  weights_.ClearToEmpty();
}
inline const std::string& SparseFeatures::weights() const {
  // @@protoc_insertion_point(field_get:predictor.SparseFeatures.weights)
  return _internal_weights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SparseFeatures::set_weights(ArgT0&& arg0, ArgT... args) {

 weights_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:predictor.SparseFeatures.weights)
}
inline std::string* SparseFeatures::mutable_weights() {
  std::string* _s = _internal_mutable_weights();
  // @@protoc_insertion_point(field_mutable:predictor.SparseFeatures.weights)
  return _s;
}
inline const std::string& SparseFeatures::_internal_weights() const {
  return weights_.Get();
}
inline void SparseFeatures::_internal_set_weights(const std::string& value) {

  weights_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SparseFeatures::_internal_mutable_weights() {

  return weights_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SparseFeatures::release_weights() {
  // @@protoc_insertion_point(field_release:predictor.SparseFeatures.weights)
  return weights_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SparseFeatures::set_allocated_weights(std::string* weights) {
  if (weights != nullptr) {

  } else {

  }
  weights_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weights,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:predictor.SparseFeatures.weights)
}

// -------------------------------------------------------------------

// FloatFeatures

// int32 num_features = 1;
inline void FloatFeatures::clear_num_features() {
  num_features_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FloatFeatures::_internal_num_features() const {
  return num_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FloatFeatures::num_features() const {
  // @@protoc_insertion_point(field_get:predictor.FloatFeatures.num_features)
  return _internal_num_features();
}
inline void FloatFeatures::_internal_set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value) {

  num_features_ = value;
}
inline void FloatFeatures::set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_features(value);
  // @@protoc_insertion_point(field_set:predictor.FloatFeatures.num_features)
}

// bytes values = 2;
inline void FloatFeatures::clear_values() {
  values_.ClearToEmpty();
}
inline const std::string& FloatFeatures::values() const {
  // @@protoc_insertion_point(field_get:predictor.FloatFeatures.values)
  return _internal_values();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatFeatures::set_values(ArgT0&& arg0, ArgT... args) {

 values_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:predictor.FloatFeatures.values)
}
inline std::string* FloatFeatures::mutable_values() {
  std::string* _s = _internal_mutable_values();
  // @@protoc_insertion_point(field_mutable:predictor.FloatFeatures.values)
  return _s;
}
inline const std::string& FloatFeatures::_internal_values() const {
  return values_.Get();
}
inline void FloatFeatures::_internal_set_values(const std::string& value) {

  values_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FloatFeatures::_internal_mutable_values() {

  return values_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FloatFeatures::release_values() {
  // @@protoc_insertion_point(field_release:predictor.FloatFeatures.values)
  return values_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FloatFeatures::set_allocated_values(std::string* values) {
  if (values != nullptr) {

  } else {

  }
  values_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), values,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:predictor.FloatFeatures.values)
}

// -------------------------------------------------------------------

// PredictionRequest

// int32 batch_size = 1;
inline void PredictionRequest::clear_batch_size() {
  batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictionRequest::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictionRequest::batch_size() const {
  // @@protoc_insertion_point(field_get:predictor.PredictionRequest.batch_size)
  return _internal_batch_size();
}
inline void PredictionRequest::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {

  batch_size_ = value;
}
inline void PredictionRequest::set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:predictor.PredictionRequest.batch_size)
}

// .predictor.FloatFeatures float_features = 2;
inline bool PredictionRequest::_internal_has_float_features() const {
  return this != internal_default_instance() && float_features_ != nullptr;
}
inline bool PredictionRequest::has_float_features() const {
  return _internal_has_float_features();
}
inline void PredictionRequest::clear_float_features() {
  if (GetArenaForAllocation() == nullptr && float_features_ != nullptr) {
    delete float_features_;
  }
  float_features_ = nullptr;
}
inline const ::predictor::FloatFeatures& PredictionRequest::_internal_float_features() const {
  const ::predictor::FloatFeatures* p = float_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::predictor::FloatFeatures&>(
      ::predictor::_FloatFeatures_default_instance_);
}
inline const ::predictor::FloatFeatures& PredictionRequest::float_features() const {
  // @@protoc_insertion_point(field_get:predictor.PredictionRequest.float_features)
  return _internal_float_features();
}
inline void PredictionRequest::unsafe_arena_set_allocated_float_features(
    ::predictor::FloatFeatures* float_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_features_);
  }
  float_features_ = float_features;
  if (float_features) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:predictor.PredictionRequest.float_features)
}
inline ::predictor::FloatFeatures* PredictionRequest::release_float_features() {

  ::predictor::FloatFeatures* temp = float_features_;
  float_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::predictor::FloatFeatures* PredictionRequest::unsafe_arena_release_float_features() {
  // @@protoc_insertion_point(field_release:predictor.PredictionRequest.float_features)

  ::predictor::FloatFeatures* temp = float_features_;
  float_features_ = nullptr;
  return temp;
}
inline ::predictor::FloatFeatures* PredictionRequest::_internal_mutable_float_features() {

  if (float_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::predictor::FloatFeatures>(GetArenaForAllocation());
    float_features_ = p;
  }
  return float_features_;
}
inline ::predictor::FloatFeatures* PredictionRequest::mutable_float_features() {
  ::predictor::FloatFeatures* _msg = _internal_mutable_float_features();
  // @@protoc_insertion_point(field_mutable:predictor.PredictionRequest.float_features)
  return _msg;
}
inline void PredictionRequest::set_allocated_float_features(::predictor::FloatFeatures* float_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete float_features_;
  }
  if (float_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::predictor::FloatFeatures>::GetOwningArena(float_features);
    if (message_arena != submessage_arena) {
      float_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_features, submessage_arena);
    }

  } else {

  }
  float_features_ = float_features;
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictionRequest.float_features)
}

// .predictor.SparseFeatures id_list_features = 3;
inline bool PredictionRequest::_internal_has_id_list_features() const {
  return this != internal_default_instance() && id_list_features_ != nullptr;
}
inline bool PredictionRequest::has_id_list_features() const {
  return _internal_has_id_list_features();
}
inline void PredictionRequest::clear_id_list_features() {
  if (GetArenaForAllocation() == nullptr && id_list_features_ != nullptr) {
    delete id_list_features_;
  }
  id_list_features_ = nullptr;
}
inline const ::predictor::SparseFeatures& PredictionRequest::_internal_id_list_features() const {
  const ::predictor::SparseFeatures* p = id_list_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::predictor::SparseFeatures&>(
      ::predictor::_SparseFeatures_default_instance_);
}
inline const ::predictor::SparseFeatures& PredictionRequest::id_list_features() const {
  // @@protoc_insertion_point(field_get:predictor.PredictionRequest.id_list_features)
  return _internal_id_list_features();
}
inline void PredictionRequest::unsafe_arena_set_allocated_id_list_features(
    ::predictor::SparseFeatures* id_list_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_list_features_);
  }
  id_list_features_ = id_list_features;
  if (id_list_features) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:predictor.PredictionRequest.id_list_features)
}
inline ::predictor::SparseFeatures* PredictionRequest::release_id_list_features() {

  ::predictor::SparseFeatures* temp = id_list_features_;
  id_list_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::predictor::SparseFeatures* PredictionRequest::unsafe_arena_release_id_list_features() {
  // @@protoc_insertion_point(field_release:predictor.PredictionRequest.id_list_features)

  ::predictor::SparseFeatures* temp = id_list_features_;
  id_list_features_ = nullptr;
  return temp;
}
inline ::predictor::SparseFeatures* PredictionRequest::_internal_mutable_id_list_features() {

  if (id_list_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::predictor::SparseFeatures>(GetArenaForAllocation());
    id_list_features_ = p;
  }
  return id_list_features_;
}
inline ::predictor::SparseFeatures* PredictionRequest::mutable_id_list_features() {
  ::predictor::SparseFeatures* _msg = _internal_mutable_id_list_features();
  // @@protoc_insertion_point(field_mutable:predictor.PredictionRequest.id_list_features)
  return _msg;
}
inline void PredictionRequest::set_allocated_id_list_features(::predictor::SparseFeatures* id_list_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete id_list_features_;
  }
  if (id_list_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::predictor::SparseFeatures>::GetOwningArena(id_list_features);
    if (message_arena != submessage_arena) {
      id_list_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_list_features, submessage_arena);
    }

  } else {

  }
  id_list_features_ = id_list_features;
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictionRequest.id_list_features)
}

// .predictor.SparseFeatures id_score_list_features = 4;
inline bool PredictionRequest::_internal_has_id_score_list_features() const {
  return this != internal_default_instance() && id_score_list_features_ != nullptr;
}
inline bool PredictionRequest::has_id_score_list_features() const {
  return _internal_has_id_score_list_features();
}
inline void PredictionRequest::clear_id_score_list_features() {
  if (GetArenaForAllocation() == nullptr && id_score_list_features_ != nullptr) {
    delete id_score_list_features_;
  }
  id_score_list_features_ = nullptr;
}
inline const ::predictor::SparseFeatures& PredictionRequest::_internal_id_score_list_features() const {
  const ::predictor::SparseFeatures* p = id_score_list_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::predictor::SparseFeatures&>(
      ::predictor::_SparseFeatures_default_instance_);
}
inline const ::predictor::SparseFeatures& PredictionRequest::id_score_list_features() const {
  // @@protoc_insertion_point(field_get:predictor.PredictionRequest.id_score_list_features)
  return _internal_id_score_list_features();
}
inline void PredictionRequest::unsafe_arena_set_allocated_id_score_list_features(
    ::predictor::SparseFeatures* id_score_list_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_score_list_features_);
  }
  id_score_list_features_ = id_score_list_features;
  if (id_score_list_features) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:predictor.PredictionRequest.id_score_list_features)
}
inline ::predictor::SparseFeatures* PredictionRequest::release_id_score_list_features() {

  ::predictor::SparseFeatures* temp = id_score_list_features_;
  id_score_list_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::predictor::SparseFeatures* PredictionRequest::unsafe_arena_release_id_score_list_features() {
  // @@protoc_insertion_point(field_release:predictor.PredictionRequest.id_score_list_features)

  ::predictor::SparseFeatures* temp = id_score_list_features_;
  id_score_list_features_ = nullptr;
  return temp;
}
inline ::predictor::SparseFeatures* PredictionRequest::_internal_mutable_id_score_list_features() {

  if (id_score_list_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::predictor::SparseFeatures>(GetArenaForAllocation());
    id_score_list_features_ = p;
  }
  return id_score_list_features_;
}
inline ::predictor::SparseFeatures* PredictionRequest::mutable_id_score_list_features() {
  ::predictor::SparseFeatures* _msg = _internal_mutable_id_score_list_features();
  // @@protoc_insertion_point(field_mutable:predictor.PredictionRequest.id_score_list_features)
  return _msg;
}
inline void PredictionRequest::set_allocated_id_score_list_features(::predictor::SparseFeatures* id_score_list_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete id_score_list_features_;
  }
  if (id_score_list_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::predictor::SparseFeatures>::GetOwningArena(id_score_list_features);
    if (message_arena != submessage_arena) {
      id_score_list_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_score_list_features, submessage_arena);
    }

  } else {

  }
  id_score_list_features_ = id_score_list_features;
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictionRequest.id_score_list_features)
}

// .predictor.FloatFeatures embedding_features = 5;
inline bool PredictionRequest::_internal_has_embedding_features() const {
  return this != internal_default_instance() && embedding_features_ != nullptr;
}
inline bool PredictionRequest::has_embedding_features() const {
  return _internal_has_embedding_features();
}
inline void PredictionRequest::clear_embedding_features() {
  if (GetArenaForAllocation() == nullptr && embedding_features_ != nullptr) {
    delete embedding_features_;
  }
  embedding_features_ = nullptr;
}
inline const ::predictor::FloatFeatures& PredictionRequest::_internal_embedding_features() const {
  const ::predictor::FloatFeatures* p = embedding_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::predictor::FloatFeatures&>(
      ::predictor::_FloatFeatures_default_instance_);
}
inline const ::predictor::FloatFeatures& PredictionRequest::embedding_features() const {
  // @@protoc_insertion_point(field_get:predictor.PredictionRequest.embedding_features)
  return _internal_embedding_features();
}
inline void PredictionRequest::unsafe_arena_set_allocated_embedding_features(
    ::predictor::FloatFeatures* embedding_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embedding_features_);
  }
  embedding_features_ = embedding_features;
  if (embedding_features) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:predictor.PredictionRequest.embedding_features)
}
inline ::predictor::FloatFeatures* PredictionRequest::release_embedding_features() {

  ::predictor::FloatFeatures* temp = embedding_features_;
  embedding_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::predictor::FloatFeatures* PredictionRequest::unsafe_arena_release_embedding_features() {
  // @@protoc_insertion_point(field_release:predictor.PredictionRequest.embedding_features)

  ::predictor::FloatFeatures* temp = embedding_features_;
  embedding_features_ = nullptr;
  return temp;
}
inline ::predictor::FloatFeatures* PredictionRequest::_internal_mutable_embedding_features() {

  if (embedding_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::predictor::FloatFeatures>(GetArenaForAllocation());
    embedding_features_ = p;
  }
  return embedding_features_;
}
inline ::predictor::FloatFeatures* PredictionRequest::mutable_embedding_features() {
  ::predictor::FloatFeatures* _msg = _internal_mutable_embedding_features();
  // @@protoc_insertion_point(field_mutable:predictor.PredictionRequest.embedding_features)
  return _msg;
}
inline void PredictionRequest::set_allocated_embedding_features(::predictor::FloatFeatures* embedding_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete embedding_features_;
  }
  if (embedding_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::predictor::FloatFeatures>::GetOwningArena(embedding_features);
    if (message_arena != submessage_arena) {
      embedding_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedding_features, submessage_arena);
    }

  } else {

  }
  embedding_features_ = embedding_features;
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictionRequest.embedding_features)
}

// .predictor.SparseFeatures unary_features = 6;
inline bool PredictionRequest::_internal_has_unary_features() const {
  return this != internal_default_instance() && unary_features_ != nullptr;
}
inline bool PredictionRequest::has_unary_features() const {
  return _internal_has_unary_features();
}
inline void PredictionRequest::clear_unary_features() {
  if (GetArenaForAllocation() == nullptr && unary_features_ != nullptr) {
    delete unary_features_;
  }
  unary_features_ = nullptr;
}
inline const ::predictor::SparseFeatures& PredictionRequest::_internal_unary_features() const {
  const ::predictor::SparseFeatures* p = unary_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::predictor::SparseFeatures&>(
      ::predictor::_SparseFeatures_default_instance_);
}
inline const ::predictor::SparseFeatures& PredictionRequest::unary_features() const {
  // @@protoc_insertion_point(field_get:predictor.PredictionRequest.unary_features)
  return _internal_unary_features();
}
inline void PredictionRequest::unsafe_arena_set_allocated_unary_features(
    ::predictor::SparseFeatures* unary_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unary_features_);
  }
  unary_features_ = unary_features;
  if (unary_features) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:predictor.PredictionRequest.unary_features)
}
inline ::predictor::SparseFeatures* PredictionRequest::release_unary_features() {

  ::predictor::SparseFeatures* temp = unary_features_;
  unary_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::predictor::SparseFeatures* PredictionRequest::unsafe_arena_release_unary_features() {
  // @@protoc_insertion_point(field_release:predictor.PredictionRequest.unary_features)

  ::predictor::SparseFeatures* temp = unary_features_;
  unary_features_ = nullptr;
  return temp;
}
inline ::predictor::SparseFeatures* PredictionRequest::_internal_mutable_unary_features() {

  if (unary_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::predictor::SparseFeatures>(GetArenaForAllocation());
    unary_features_ = p;
  }
  return unary_features_;
}
inline ::predictor::SparseFeatures* PredictionRequest::mutable_unary_features() {
  ::predictor::SparseFeatures* _msg = _internal_mutable_unary_features();
  // @@protoc_insertion_point(field_mutable:predictor.PredictionRequest.unary_features)
  return _msg;
}
inline void PredictionRequest::set_allocated_unary_features(::predictor::SparseFeatures* unary_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unary_features_;
  }
  if (unary_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::predictor::SparseFeatures>::GetOwningArena(unary_features);
    if (message_arena != submessage_arena) {
      unary_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unary_features, submessage_arena);
    }

  } else {

  }
  unary_features_ = unary_features;
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictionRequest.unary_features)
}

// -------------------------------------------------------------------

// FloatVec

// repeated float data = 1;
inline int FloatVec::_internal_data_size() const {
  return data_.size();
}
inline int FloatVec::data_size() const {
  return _internal_data_size();
}
inline void FloatVec::clear_data() {
  data_.Clear();
}
inline float FloatVec::_internal_data(int index) const {
  return data_.Get(index);
}
inline float FloatVec::data(int index) const {
  // @@protoc_insertion_point(field_get:predictor.FloatVec.data)
  return _internal_data(index);
}
inline void FloatVec::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.FloatVec.data)
}
inline void FloatVec::_internal_add_data(float value) {
  data_.Add(value);
}
inline void FloatVec::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:predictor.FloatVec.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatVec::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatVec::data() const {
  // @@protoc_insertion_point(field_list:predictor.FloatVec.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatVec::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatVec::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:predictor.FloatVec.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PredictionResponse

// map<string, .predictor.FloatVec> predictions = 1;
inline int PredictionResponse::_internal_predictions_size() const {
  return predictions_.size();
}
inline int PredictionResponse::predictions_size() const {
  return _internal_predictions_size();
}
inline void PredictionResponse::clear_predictions() {
  predictions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::predictor::FloatVec >&
PredictionResponse::_internal_predictions() const {
  return predictions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::predictor::FloatVec >&
PredictionResponse::predictions() const {
  // @@protoc_insertion_point(field_map:predictor.PredictionResponse.predictions)
  return _internal_predictions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::predictor::FloatVec >*
PredictionResponse::_internal_mutable_predictions() {
  return predictions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::predictor::FloatVec >*
PredictionResponse::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_map:predictor.PredictionResponse.predictions)
  return _internal_mutable_predictions();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace predictor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_predictor_2eproto
